<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-sclae=1.0">
    <title>المساعد المالي الشخصي</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Calm Neutral -->
    <!-- Application Structure Plan: تم تصميم التطبيق كلوحة تحكم من صفحة واحدة (SPA) مع هيكل تنقل جانبي. الواجهة الرئيسية تعرض نظرة عامة شاملة، بينما توفر القائمة الجانبية وصولاً سريعًا ومنظمًا إلى أقسام وظيفية متعددة: 1) لوحة التحكم (الرئيسية)، 2) إدارة الالتزامات مع وظائف دفع، 3) سجل عمليات مفلتر، 4) أداة لإنشاء تقارير مالية مفصلة باستخدام LLM، 5) ميزة جديدة لرصد الميزانيات. هذا الهيكل يسمح بفصل المهام المعقدة وتقديمها في مساحات مخصصة، مما يسهل على المستخدمين التركيز على مهمة واحدة في كل مرة وتحسين تجربة المستخدم. -->
    <!-- Visualization & Content Choices:
        - إجمالي الرصيد: الهدف(إعلامي)، الطريقة(عرض رقمي ديناميكي)، التفاعل(لا يوجد)، المبرر(توفير لمحة سريعة عن الوضع المالي العام).
        - توزيع الميزانية: الهدف(مقارنة)، الطريقة(رسم بياني دائري باستخدام Chart.js)، التفاعل(تمرير الفأرة لعرض التفاصيل)، المبرر(تسهيل فهم كيفية توزيع الأموال بين البنود المختلفة بصرياً).
        - قائمة البنود: الهدف(إعلامي)، الطريقة(بطاقات عرض)، التفاعل(لا يوجد)، المبرر(عرض واضح ومفصل لكل حساب ورصيده الحالي).
        - جدول الالتزامات: الهدف(تنظيمي)، الطريقة(جدول HTML)، التفاعل(إضافة/حذف/دفع)، المبرر(تتبع الديون بين الحسابات بطريقة منظمة وواضحة).
        - سجل العمليات: الهدف(تنظيمي)، الطريقة(قائمة HTML مع عناصر تصفية)، التفاعل(التصفية حسب النوع، المصدر، البند، التاريخ)، المبرر(توفير سجل تاريخي لجميع الحركات المالية قابل للبحث والفرز).
        - رصد الميزانيات: الهدف(تحليلي)، الطريقة (قائمة HTML للعناصر المحددة + حقل نصي للتحليل عبر LLM)، التفاعل (زر للتحليل)، المبرر (دمج الأرقام الدقيقة مع التحليل الذكي لتوفير رؤية شاملة).
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Tajawal', sans-serif;
            background-color: #fdfaf6;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 400px;
            margin-left: auto;
            margin-right: auto;
            height: 300px;
            max-height: 400px;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 350px;
            }
        }
        .modal {
            transition: opacity 0.25s ease;
        }
        .modal-active {
            display: flex;
        }
        input::placeholder {
            text-align: right;
        }
        .btn {
            transition: all 0.2s ease;
        }
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }
        .sidebar {
            transition: transform 0.3s ease-in-out;
            transform: translateX(100%);
        }
        .sidebar-active {
            transform: translateX(0);
        }
        .content-section {
            display: none;
        }
        .content-section.active {
            display: block;
        }
        .toast {
            transition: all 0.3s ease-in-out;
            transform: translateY(100%);
            opacity: 0;
        }
        .toast-active {
            transform: translateY(0);
            opacity: 1;
        }
         #auth-container {
            min-height: 100vh;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 24px;
            height: 24px;
            border-radius: 50%;
            border-left-color: #fff;
            animation: spin 1s ease infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .ltr {
            direction: ltr;
        }
    </style>
</head>
<body class="bg-stone-50 text-stone-800">

    <!-- Auth Container -->
    <div id="auth-container" class="flex items-center justify-center p-4">
        <div class="w-full max-w-md">
             <!-- Domain Fix Instructions -->
             <div id="domain-fix-instruction" class="hidden bg-amber-100 border-l-4 border-amber-500 text-amber-700 p-4 rounded-lg mb-6 text-sm" role="alert">
                <p class="font-bold">إجراء مطلوب لتفعيل تسجيل الدخول عبر Google</p>
                <p class="mt-2">لأسباب أمنية، يجب إضافة نطاق هذا الموقع إلى قائمة النطاقات المصرّح بها في Firebase. يرجى نسخ النطاق أدناه:</p>
                <div class="my-2">
                    <div class="mt-1 flex rounded-md shadow-sm">
                        <input type="text" readonly id="domain-to-copy" class="flex-1 block w-full rounded-none rounded-r-md sm:text-sm border-stone-300 bg-amber-50 p-2 text-left ltr">
                        <button id="copy-domain-btn" type="button" class="relative -ml-px inline-flex items-center space-x-2 px-4 py-2 border border-stone-300 text-sm font-medium rounded-l-md text-stone-700 bg-stone-50 hover:bg-stone-100">
                            <span>نسخ</span>
                        </button>
                    </div>
                </div>
                <p>ثم اذهب إلى إعدادات مشروعك في Firebase > Authentication > Settings > Authorized domains وأضفه هناك.</p>
            </div>
            <!-- Login Form -->
            <div id="login-view">
                <div class="bg-white p-8 rounded-2xl shadow-lg text-center">
                    <h2 class="text-3xl font-bold text-teal-700 mb-2">تسجيل الدخول</h2>
                    <p class="text-stone-500 mb-6">مرحباً بعودتك!</p>
                    <form id="login-form" class="space-y-4">
                        <input id="login-email" type="email" placeholder="البريد الإلكتروني" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-teal-400" required>
                        <input id="login-password" type="password" placeholder="كلمة المرور" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-teal-400" required>
                        <button type="submit" class="w-full btn bg-teal-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-teal-600 flex items-center justify-center">
                            <span class="button-text">دخول</span>
                            <div class="spinner hidden"></div>
                        </button>
                    </form>
                    <div class="my-6 flex items-center">
                        <div class="flex-grow border-t border-stone-300"></div>
                        <span class="mx-4 text-sm text-stone-500">أو</span>
                        <div class="flex-grow border-t border-stone-300"></div>
                    </div>
                    <button id="google-signin-btn" type="button" class="w-full btn bg-white border border-stone-300 text-stone-700 font-bold py-3 px-4 rounded-lg hover:bg-stone-50 flex items-center justify-center gap-2">
                        <svg class="w-5 h-5" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg"><path fill="#FFC107" d="M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z"></path><path fill="#FF3D00" d="M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z"></path><path fill="#4CAF50" d="M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.222,0-9.618-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z"></path><path fill="#1976D2" d="M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571l6.19,5.238C42.022,36.214,44,30.561,44,24C44,22.659,43.862,21.35,43.611,20.083z"></path></svg>
                        <span>تسجيل الدخول باستخدام Google</span>
                    </button>
                    <p class="mt-6 text-sm text-stone-600">
                        ليس لديك حساب؟ <button id="show-signup-2" class="font-bold text-teal-600 hover:underline">أنشئ حساباً جديداً</button>
                    </p>
                    <div class="mt-4 border-t pt-4">
                        <button id="guest-signin-btn" type="button" class="text-sm text-stone-500 hover:text-teal-600 hover:underline">المتابعة كزائر (سيتم حفظ البيانات على هذا المتصفح فقط)</button>
                    </div>
                </div>
            </div>

            <!-- Signup Form -->
            <div id="signup-view" class="hidden">
                 <div class="bg-white p-8 rounded-2xl shadow-lg text-center">
                    <h2 class="text-3xl font-bold text-teal-700 mb-2">إنشاء حساب جديد</h2>
                    <p class="text-stone-500 mb-6">انضم إلينا الآن!</p>
                    <form id="signup-form" class="space-y-4">
                        <input id="signup-name" type="text" placeholder="الاسم" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-teal-400" required>
                        <input id="signup-phone" type="tel" placeholder="رقم الجوال" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-teal-400" required>
                        <input id="signup-email" type="email" placeholder="البريد الإلكتروني (للدخول)" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-teal-400" required>
                        <input id="signup-password" type="password" placeholder="كلمة المرور" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-teal-400" required>
                        <button type="submit" class="w-full btn bg-teal-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-teal-600 flex items-center justify-center">
                            <span class="button-text">إنشاء حساب</span>
                            <div class="spinner hidden"></div>
                        </button>
                    </form>
                    <p class="mt-6 text-sm text-stone-600">
                        لديك حساب بالفعل؟ <button id="show-login" class="font-bold text-teal-600 hover:underline">سجل دخولك</button>
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Sidebar -->
    <div id="sidebar" class="sidebar fixed top-0 right-0 h-full w-64 bg-stone-800 text-white shadow-lg p-6 z-50 flex flex-col">
        <div>
            <div class="flex justify-between items-center mb-8">
                <h2 class="text-xl font-bold">القائمة</h2>
                <button id="close-sidebar" class="text-white text-2xl leading-none">&times;</button>
            </div>
            <nav class="space-y-4">
                <button class="menu-item w-full text-right p-2 rounded-lg hover:bg-stone-700 active-menu-item" data-target="dashboard">
                    الصفحة الرئيسية
                </button>
                <button class="menu-item w-full text-right p-2 rounded-lg hover:bg-stone-700" data-target="transactions">
                    سجل العمليات المالية
                </button>
                <button class="menu-item w-full text-right p-2 rounded-lg hover:bg-stone-700" data-target="liabilities">
                    الالتزامات
                </button>
                <button class="menu-item w-full text-right p-2 rounded-lg hover:bg-stone-700" data-target="attachments">
                    المرفقات
                </button>
                <button class="menu-item w-full text-right p-2 rounded-lg hover:bg-stone-700" data-target="report">
                    تقرير مالي عام
                </button>
                <button class="menu-item w-full text-right p-2 rounded-lg hover:bg-stone-700" data-target="settings">
                    الإعدادات
                </button>
                <button class="menu-item w-full text-right p-2 rounded-lg hover:bg-stone-700" data-target="guidelines">
                    الدليل الإرشادي
                </button>
            </nav>
        </div>
        <div class="mt-auto">
             <button id="auth-button" class="w-full btn bg-red-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-red-600">تسجيل الخروج</button>
        </div>
    </div>

    <!-- Main Content -->
    <div id="main-app-container" class="container mx-auto p-4 md:p-8 hidden">
        <header class="flex justify-between items-center mb-8">
            <button id="open-sidebar" class="text-stone-800 text-3xl leading-none">☰</button>
            <div class="text-center flex-1">
                 <h1 class="text-4xl md:text-5xl font-bold text-teal-700">المساعد المالي الشخصي</h1>
                 <p class="text-stone-500 mt-2">أدر أموالك بذكاء وبساطة.</p>
            </div>
            <div></div>
        </header>
        
        <!-- Dashboard Section -->
        <section id="dashboard" class="content-section active">
            <main class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div class="lg:col-span-2 space-y-8">
                    <section id="overview" class="bg-white p-6 rounded-2xl shadow-lg">
                        <h2 class="text-2xl font-bold text-teal-600 mb-4">نظرة عامة</h2>
                        <p class="mb-6 text-stone-600">هنا يمكنك رؤية ملخص لوضعك المالي الحالي. يعرض الرسم البياني كيفية توزيع أموالك عبر مختلف البنود، مما يساعدك على اتخاذ قرارات مالية أفضل.</p>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 items-center">
                            <div class="text-center">
                                <h3 class="text-lg text-stone-500 mb-2">إجمالي الرصيد المتاح</h3>
                                <p id="total-balance" class="text-4xl font-bold text-teal-700">0.00</p>
                                <p class="text-stone-500">ريال سعودي</p>
                            </div>
                            <div class="chart-container">
                                <canvas id="budget-chart"></canvas>
                            </div>
                        </div>
                    </section>
                    <section id="actions" class="bg-white p-6 rounded-2xl shadow-lg">
                        <h2 class="text-2xl font-bold text-teal-600 mb-4">العمليات المالية</h2>
                        <p class="mb-6 text-stone-600">من هنا يمكنك تنفيذ عمليات الإيداع والسحب. قم بإدخال المبلغ، اختر البند المناسب، وأضف وصفًا للعملية لتتبع نفقاتك وإيراداتك بدقة.</p>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div id="deposit-card">
                                <h3 class="text-xl font-bold mb-3 text-green-600">إيداع مبلغ جديد</h3>
                                <form id="deposit-form" class="space-y-4">
                                    <div class="flex gap-4">
                                        <div class="flex-1">
                                            <label for="deposit-source" class="block text-sm font-medium text-stone-700 mb-1">المصدر</label>
                                            <select id="deposit-source" class="w-full p-3 border border-stone-300 rounded-lg bg-white focus:ring-2 focus:ring-green-400" required>
                                                <option value="مكنون">مكنون</option>
                                                <option value="كاش">كاش</option>
                                                <option value="مبالغ مستردة">مبالغ مستردة</option>
                                                <option value="أرباح مبقاة">أرباح مبقاة</option>
                                                <option value="اخرى">اخرى</option>
                                            </select>
                                        </div>
                                        <div class="flex-1">
                                            <label for="deposit-amount" class="block text-sm font-medium text-stone-700 mb-1">المبلغ</label>
                                            <input id="deposit-amount" type="number" placeholder="المبلغ" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-green-400" required>
                                        </div>
                                    </div>
                                    <div id="refund-txid-container" class="mt-2 hidden">
                                        <label for="refund-txid" class="block text-sm font-medium text-stone-700 mb-1">رمز قيد الصرف</label>
                                        <input id="refund-txid" type="text" placeholder="أدخل رمز قيد الصرف" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-green-400">
                                    </div>
                                    <div id="other-source-container" class="mt-2 hidden">
                                        <label for="other-source-name" class="block text-sm font-medium text-stone-700 mb-1">اذكر المصدر</label>
                                        <input id="other-source-name" type="text" placeholder="اذكر المصدر" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-green-400">
                                    </div>
                                    <div class="mt-2">
                                        <label for="deposit-category" class="block text-sm font-medium text-stone-700 mb-1">إلى</label>
                                        <select id="deposit-category" class="w-full p-3 border border-stone-300 rounded-lg bg-white focus:ring-2 focus:ring-green-400" required></select>
                                    </div>
                                    <input id="deposit-desc" type="text" placeholder="الوصف (اختياري)" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-green-400">
                                    <label id="deposit-invoice-label" for="deposit-invoice" class="block text-sm font-medium text-stone-700 mb-1">إرفاق مستند (صورة)</label>
                                    <input id="deposit-invoice" type="file" accept="image/*" class="w-full p-3 border border-stone-300 rounded-lg">
                                    <button type="submit" class="w-full btn bg-green-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-600">تنفيذ الإيداع</button>
                                </form>
                            </div>
                            <div id="withdraw-card">
                                <h3 class="text-xl font-bold mb-3 text-red-600">سحب مبلغ</h3>
                                <form id="withdraw-form" class="space-y-4">
                                    <div>
                                        <label for="withdraw-dest-category" class="block text-sm font-medium text-stone-700 mb-1">جهة الصرف</label>
                                        <select id="withdraw-dest-category" class="w-full p-3 border border-stone-300 rounded-lg bg-white focus:ring-2 focus:ring-red-400" required></select>
                                    </div>
                                    <div>
                                        <label for="withdraw-source-category" class="block text-sm font-medium text-stone-700 mb-1">مصدر السحب</label>
                                        <select id="withdraw-source-category" class="w-full p-3 border border-stone-300 rounded-lg bg-white focus:ring-2 focus:ring-red-400" required></select>
                                    </div>
                                    <label for="withdraw-amount" class="block text-sm font-medium text-stone-700 mb-1">المبلغ</label>
                                    <input id="withdraw-amount" type="number" placeholder="المبلغ" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-red-400" required>
                                    <div>
                                        <label for="withdraw-payer-name" class="block text-sm font-medium text-stone-700 mb-1">اسم الصارف (اختياري)</label>
                                        <input id="withdraw-payer-name" type="text" placeholder="اسم الصارف" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-red-400">
                                    </div>
                                    <label for="withdraw-desc" class="block text-sm font-medium text-stone-700 mb-1">الوصف</label>
                                    <input id="withdraw-desc" type="text" placeholder="مثال: إيجار، مشتريات..." class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-red-400" required>
                                    <label id="withdraw-invoice-label" for="withdraw-invoice" class="block text-sm font-medium text-stone-700 mb-1">إرفاق مستند (صورة)</label>
                                    <input id="withdraw-invoice" type="file" accept="image/*" class="w-full p-3 border border-stone-300 rounded-lg">
                                    <button type="submit" class="w-full btn bg-red-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-red-600">تنفيذ السحب</button>
                                </form>
                            </div>
                        </div>
                    </section>
                </div>
                <div class="lg:col-span-1 space-y-8">
                     <section id="accounts" class="bg-white p-6 rounded-2xl shadow-lg">
                        <h2 class="text-2xl font-bold text-teal-600 mb-4">البنود / الحسابات</h2>
                        <p class="mb-6 text-stone-600">هنا يمكنك إدارة جميع بنودك المالية. كل بند يمثل "حسابًا" منفصلاً لتصنيف أموالك، مثل "مصاريف شخصية" أو "طوارئ".</p>
                        <div id="accounts-list" class="space-y-4 mb-4"></div>
                    </section>
                </div>
            </main>
        </section>

        <!-- Liabilities Section -->
        <section id="liabilities" class="content-section">
            <div class="bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold text-teal-600 mb-4">الالتزامات</h2>
                <p class="mb-6 text-stone-600">هذا القسم يعرض الديون أو الالتزامات المالية بين البنود المختلفة. يمكنك إضافة التزامات جديدة أو تسديد الالتزامات الحالية.</p>
                <form id="add-liability-form" class="space-y-4 mb-8">
                    <h3 class="text-xl font-bold text-orange-600">إضافة التزام جديد</h3>
                    <div>
                        <label for="liability-from" class="block text-sm font-medium text-stone-700 mb-1">مدين لـ</label>
                        <select id="liability-from" class="w-full p-3 border border-stone-300 rounded-lg bg-white focus:ring-2 focus:ring-orange-400" required></select>
                    </div>
                    <div>
                        <label for="liability-to" class="block text-sm font-medium text-stone-700 mb-1">دائن لـ</label>
                        <select id="liability-to" class="w-full p-3 border border-stone-300 rounded-lg bg-white focus:ring-2 focus:ring-orange-400" required></select>
                    </div>
                    <div>
                        <label for="liability-amount" class="block text-sm font-medium text-stone-700 mb-1">المبلغ</label>
                        <input id="liability-amount" type="number" placeholder="المبلغ" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-orange-400" required>
                    </div>
                    <div>
                        <label for="liability-date" class="block text-sm font-medium text-stone-700 mb-1">تاريخ الاستحقاق</label>
                        <input id="liability-date" type="date" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-orange-400">
                    </div>
                    <button type="submit" class="w-full btn bg-orange-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-orange-600">إضافة التزام</button>
                </form>
                <div id="liabilities-list" class="space-y-3">
                    <p class="text-stone-500 text-center">لا توجد التزامات حالياً.</p>
                </div>
            </div>
        </section>
        
        <!-- Transactions Section -->
        <section id="transactions" class="content-section">
            <div class="bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold text-teal-600 mb-4">سجل العمليات المالية</h2>
                <p class="mb-6 text-stone-600">يعرض هذا السجل قائمة بآخر العمليات المالية التي قمت بها. استخدم خيارات التصفية أدناه للعثور على عمليات معينة.</p>
                
                <!-- Filter Controls -->
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                    <div>
                        <label for="filter-type" class="block text-sm font-medium text-stone-700">النوع</label>
                        <select id="filter-type" class="w-full p-2 border border-stone-300 rounded-lg bg-white">
                            <option value="all">الكل</option>
                            <option value="deposit">إيداع</option>
                            <option value="withdraw">سحب</option>
                            <option value="transfer">تحويل/تسديد</option>
                            <option value="liability">قيد التزام</option>
                            <option value="refund">مبلغ مسترد</option>
                        </select>
                    </div>
                    <div>
                        <label for="filter-source" class="block text-sm font-medium text-stone-700">المصدر</label>
                        <select id="filter-source" class="w-full p-2 border border-stone-300 rounded-lg bg-white"></select>
                    </div>
                    <div>
                        <label for="filter-category" class="block text-sm font-medium text-stone-700">البند</label>
                        <select id="filter-category" class="w-full p-2 border border-stone-300 rounded-lg bg-white"></select>
                    </div>
                    <div>
                        <label for="filter-date" class="block text-sm font-medium text-stone-700">التاريخ</label>
                        <input id="filter-date" type="date" class="w-full p-2 border border-stone-300 rounded-lg bg-white">
                    </div>
                </div>

                <div id="transactions-list" class="space-y-3 max-h-96 overflow-y-auto pr-2">
                    <p class="text-stone-500 text-center">لا توجد عمليات مسجلة.</p>
                </div>
            </div>
        </section>

        <!-- Report Section -->
        <section id="report" class="content-section">
            <div id="report-main-menu" class="bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold text-teal-600 mb-4">تقرير مالي عام</h2>
                <p class="mb-6 text-stone-600">اختر نوع التقرير الذي تريد استعراضه للحصول على تحليل مفصل.</p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div id="income-report-card" class="report-card p-6 rounded-xl shadow-md cursor-pointer bg-green-100 text-green-800 hover:bg-green-200 transition-colors">
                        <h3 class="text-xl font-bold">إجمالي الإيرادات</h3>
                        <p id="total-income-display" class="text-2xl font-bold mt-2">0.00</p>
                        <p class="text-sm">اضغط لعرض التفاصيل</p>
                    </div>
                    <div id="expenses-report-card" class="report-card p-6 rounded-xl shadow-md cursor-pointer bg-red-100 text-red-800 hover:bg-red-200 transition-colors">
                        <h3 class="text-xl font-bold">إجمالي المصاريف</h3>
                        <p id="total-expenses-display" class="text-2xl font-bold mt-2">0.00</p>
                        <p class="text-sm">اضغط لعرض التفاصيل</p>
                    </div>
                    <div id="surplus-report-card" class="report-card p-6 rounded-xl shadow-md cursor-pointer bg-blue-100 text-blue-800 hover:bg-blue-200 transition-colors">
                        <h3 class="text-xl font-bold">العجز والفائض الإجمالي</h3>
                        <p id="total-surplus-deficit-display" class="text-2xl font-bold mt-2 text-red-600">0.00</p>
                        <p class="text-sm">اضغط لعرض التفاصيل</p>
                    </div>
                    <div id="liabilities-report-card" class="report-card p-6 rounded-xl shadow-md cursor-pointer bg-orange-100 text-orange-800 hover:bg-orange-200 transition-colors">
                        <h3 class="text-xl font-bold">الالتزامات</h3>
                        <p id="total-liabilities-display" class="text-2xl font-bold mt-2">0.00</p>
                        <p class="text-sm">اضغط لعرض التفاصيل</p>
                    </div>
                </div>
            </div>

            <!-- Detailed Income Report -->
            <div id="detailed-income-report" class="bg-white p-6 rounded-2xl shadow-lg mt-6 hidden">
                <button class="back-to-reports btn bg-stone-200 text-stone-700 font-bold py-2 px-4 rounded-lg hover:bg-stone-300 mb-6">عودة</button>
                <h2 class="text-2xl font-bold text-green-600 mb-4">تقرير الإيرادات المفصل</h2>
                <div id="detailed-income-list" class="space-y-4"></div>
            </div>

            <!-- Detailed Expenses Report -->
            <div id="detailed-expenses-report" class="bg-white p-6 rounded-2xl shadow-lg mt-6 hidden">
                <button class="back-to-reports btn bg-stone-200 text-stone-700 font-bold py-2 px-4 rounded-lg hover:bg-stone-300 mb-6">عودة</button>
                <h2 class="text-2xl font-bold text-red-600 mb-4">تقرير المصاريف المفصل</h2>
                <div id="detailed-expenses-list" class="space-y-4"></div>
            </div>

            <!-- Detailed Surplus/Deficit Report -->
            <div id="detailed-surplus-report" class="bg-white p-6 rounded-2xl shadow-lg mt-6 hidden">
                <button class="back-to-reports btn bg-stone-200 text-stone-700 font-bold py-2 px-4 rounded-lg hover:bg-stone-300 mb-6">عودة</button>
                <h2 class="text-2xl font-bold text-blue-600 mb-4">تقرير العجز والفائض</h2>
                <div id="detailed-surplus-list" class="space-y-4"></div>
            </div>

            <!-- Detailed Liabilities Report -->
            <div id="detailed-liabilities-report" class="bg-white p-6 rounded-2xl shadow-lg mt-6 hidden">
                <button class="back-to-reports btn bg-stone-200 text-stone-700 font-bold py-2 px-4 rounded-lg hover:bg-stone-300 mb-6">عودة</button>
                <h2 class="text-2xl font-bold text-orange-600 mb-4">تقرير الالتزامات</h2>
                <div id="detailed-liabilities-list" class="space-y-4"></div>
            </div>
        </section>

        <!-- Attachments Section -->
        <section id="attachments" class="content-section">
            <div class="bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold text-teal-600 mb-4">المرفقات</h2>
                <p class="mb-6 text-stone-600">تصفح جميع المستندات والصور التي قمت بإرفاقها مع عملياتك المالية.</p>
                
                <!-- Filter Controls -->
                <div class="mb-6">
                    <label for="filter-attachment-type" class="block text-sm font-medium text-stone-700">تصفية حسب النوع</label>
                    <select id="filter-attachment-type" class="w-full p-2 border border-stone-300 rounded-lg bg-white">
                        <option value="all">الكل</option>
                        <option value="deposit">إيداع</option>
                        <option value="withdraw">سحب</option>
                        <option value="liability">التزام</option>
                        <option value="payslips">مسيرات</option>
                    </select>
                </div>
                <div id="attachments-list" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    <p class="col-span-full text-center text-stone-500">لا توجد مرفقات مسجلة.</p>
                </div>
            </div>
        </section>

        <!-- Settings Section -->
        <section id="settings" class="content-section">
            <div class="bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold text-teal-600 mb-4">الإعدادات</h2>
                <p class="mb-6 text-stone-600">قم بتخصيص التطبيق ليناسب احتياجاتك. هنا يمكنك إدارة بنودك المالية ومصادر الإيداع.</p>

                <div class="mb-8">
                    <h3 class="text-xl font-bold text-teal-500 mb-4">إدارة البنود المالية</h3>
                    <p class="mb-4 text-stone-600">يمكنك إضافة بنود مالية جديدة أو تعديل ترتيبها. اسحب وأفلت لإعادة الترتيب.</p>
                    <form id="add-category-form" class="flex gap-2">
                        <input id="new-category-name" type="text" placeholder="اسم البند الجديد" class="flex-grow p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-teal-400" required>
                        <button type="submit" class="btn bg-teal-500 text-white font-bold py-3 px-5 rounded-lg hover:bg-teal-600">+</button>
                    </form>
                    <div id="accounts-list-settings" class="space-y-4 mt-4"></div>
                </div>

                <div>
                    <h3 class="text-xl font-bold text-teal-500 mb-4">إدارة مصادر الإيداع</h3>
                    <p class="mb-4 text-stone-600">أضف مصادر إيداع جديدة لتبسيط عملية تسجيل الإيرادات.</p>
                    <form id="add-source-form" class="flex gap-2">
                        <input id="new-source-name" type="text" placeholder="اسم المصدر الجديد" class="flex-grow p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-teal-400" required>
                        <button type="submit" class="btn bg-teal-500 text-white font-bold py-3 px-5 rounded-lg hover:bg-teal-600">+</button>
                    </form>
                </div>
            </div>
        </section>

        <!-- Guidelines Section -->
        <section id="guidelines" class="content-section">
            <div class="bg-white p-6 rounded-2xl shadow-lg">
                <h2 class="text-2xl font-bold text-teal-600 mb-4">الدليل الإرشادي</h2>
                <p class="mb-6 text-stone-600">أهلاً بك في دليلك الإرشادي لمساعدك المالي الشخصي. هذا الدليل سيساعدك على فهم كيفية استخدام التطبيق وميزاته الرئيسية بفعالية.</p>

                <h3 class="text-xl font-bold text-teal-500 mb-2">1. لوحة التحكم الرئيسية</h3>
                <ul class="list-disc list-inside space-y-2 text-stone-600 mb-6">
                    <li>تعرض لك نظرة عامة على إجمالي رصيدك الحالي وتوزيع أموالك على البنود المختلفة.</li>
                    <li>يمكنك تنفيذ عمليات الإيداع والسحب بسهولة من خلال النماذج المخصصة.</li>
                </ul>

                <h3 class="text-xl font-bold text-teal-500 mb-2">2. الالتزامات</h3>
                <ul class="list-disc list-inside space-y-2 text-stone-600 mb-6">
                    <li>سجل التزاماتك المالية بين البنود المختلفة وتتبعها بانتظام.</li>
                    <li>عند دفع التزام، يمكنك اختيار تسديده كليًا أو جزئيًا.</li>
                </ul>

                <h3 class="text-xl font-bold text-teal-500 mb-2">3. سجل العمليات</h3>
                <ul class="list-disc list-inside space-y-2 text-stone-600 mb-6">
                    <li>يحتفظ بسجل لكل حركة مالية (إيداع، سحب، التزام، استرداد).</li>
                    <li>يمكنك تصفية السجل حسب النوع، المصدر، البند، أو التاريخ للعثور على أي عملية بسرعة.</li>
                </ul>

                <h3 class="text-xl font-bold text-teal-500 mb-2">4. التقارير المالية</h3>
                <ul class="list-disc list-inside space-y-2 text-stone-600 mb-6">
                    <li>يوفر لك تقارير مفصلة حول إيراداتك، مصروفاتك، والفائض/العجز لكل بند.</li>
                    <li>كل تقرير يقدم لك نظرة شاملة لمساعدتك على تقييم أدائك المالي.</li>
                </ul>

                <h3 class="text-xl font-bold text-teal-500 mb-2">5. المرفقات</h3>
                <ul class="list-disc list-inside space-y-2 text-stone-600 mb-6">
                    <li>يتم عرض جميع المستندات أو الصور التي قمت بإرفاقها بعملياتك في مكان واحد.</li>
                    <li>يمكنك تصفية المرفقات للوصول السريع إلى الفواتير، المسيرات، أو أي وثائق أخرى.</li>
                </ul>

                <h3 class="text-xl font-bold text-teal-500 mb-2">6. الإعدادات</h3>
                <ul class="list-disc list-inside space-y-2 text-stone-600">
                    <li>من هنا يمكنك إضافة بنود مالية جديدة أو مصادر إيداع مخصصة.</li>
                    <li>كما يمكنك تعديل أسماء البنود أو حذفها إذا كانت أرصدتها صفرًا.</li>
                </ul>
            </div>
        </section>
    </div>

    <!-- Modals -->
    <div id="error-modal" class="modal fixed inset-0 bg-black bg-opacity-50 items-center justify-center p-4 hidden">
        <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-lg w-full text-center">
            <h2 id="error-title" class="text-2xl font-bold text-red-600 mb-4">حدث خطأ</h2>
            <div id="error-message-container" class="text-stone-600 mb-6 whitespace-pre-wrap text-right">
                <p id="error-message"></p>
            </div>
            <div class="flex justify-center gap-4 pt-4">
                <button type="button" id="close-error-modal" class="btn bg-stone-200 text-stone-700 font-bold py-3 px-6 rounded-lg hover:bg-stone-300">إغلاق</button>
            </div>
        </div>
    </div>

    <div id="deficit-modal" class="modal fixed inset-0 bg-black bg-opacity-50 items-center justify-center p-4 hidden">
        <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-lg w-full text-center">
            <h2 class="text-2xl font-bold text-red-600 mb-4">عجز في الرصيد!</h2>
            <p id="deficit-message" class="text-stone-600 mb-6"></p>
            <form id="deficit-form" class="space-y-4">
                <div class="text-right">
                    <label for="deficit-source-category" class="font-medium text-stone-700">تريد تغطية العجز من أي بند؟</label>
                    <select id="deficit-source-category" class="w-full p-3 mt-1 border border-stone-300 rounded-lg bg-white focus:ring-2 focus:ring-teal-400" required></select>
                </div>
                <div class="flex justify-center gap-4 pt-4">
                    <button type="submit" class="btn bg-teal-500 text-white font-bold py-3 px-6 rounded-lg hover:bg-teal-600">تأكيد السحب</button>
                    <button type="button" id="cancel-deficit" class="btn bg-stone-200 text-stone-700 font-bold py-3 px-6 rounded-lg hover:bg-stone-300">إلغاء</button>
                </div>
            </form>
        </div>
    </div>
    
    <div id="delete-modal" class="modal fixed inset-0 bg-black bg-opacity-50 items-center justify-center p-4 hidden">
        <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-lg w-full text-center">
            <h2 class="text-2xl font-bold text-red-600 mb-4">هل أنت متأكد؟</h2>
            <p id="delete-message" class="text-stone-600 mb-6">سيتم حذف هذا البند نهائيًا.</p>
            <div class="flex justify-center gap-4 pt-4">
                <button type="button" id="confirm-delete" class="btn bg-red-500 text-white font-bold py-3 px-6 rounded-lg hover:bg-red-600">تأكيد الحذف</button>
                <button type="button" id="cancel-delete" class="btn bg-stone-200 text-stone-700 font-bold py-3 px-6 rounded-lg hover:bg-stone-300">إلغاء</button>
            </div>
        </div>
    </div>

    <div id="pay-liability-modal" class="modal fixed inset-0 bg-black bg-opacity-50 items-center justify-center p-4 hidden">
        <div class="bg-white rounded-2xl shadow-2xl p-8 max-w-lg w-full">
            <h2 class="text-2xl font-bold text-teal-600 mb-4 text-center">دفع التزام</h2>
            <form id="pay-liability-form" class="space-y-4">
                <p id="pay-liability-details" class="text-stone-600 mb-4 text-center"></p>
                <div>
                    <label for="pay-type" class="block text-sm font-medium text-stone-700 mb-1">نوع الدفع</label>
                    <select id="pay-type" class="w-full p-3 border border-stone-300 rounded-lg bg-white focus:ring-2 focus:ring-teal-400" required>
                        <option value="full">دفع كلي</option>
                        <option value="partial">دفع جزئي</option>
                    </select>
                </div>
                <div id="partial-pay-amount-container" class="hidden">
                    <label for="partial-pay-amount" class="block text-sm font-medium text-stone-700 mb-1">المبلغ المراد دفعه</label>
                    <input id="partial-pay-amount" type="number" placeholder="المبلغ" class="w-full p-3 border border-stone-300 rounded-lg focus:ring-2 focus:ring-teal-400">
                </div>
                <div>
                    <label for="pay-source-category" class="block text-sm font-medium text-stone-700 mb-1">من أي بند ستدفع؟</label>
                    <select id="pay-source-category" class="w-full p-3 border border-stone-300 rounded-lg bg-white focus:ring-2 focus:ring-teal-400" required></select>
                </div>
                <div class="flex justify-center gap-4 pt-4">
                    <button type="submit" class="btn bg-green-500 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-600">تأكيد الدفع</button>
                    <button type="button" id="cancel-pay" class="btn bg-stone-200 text-stone-700 font-bold py-3 px-6 rounded-lg hover:bg-stone-300">إلغاء</button>
                </div>
            </form>
        </div>
    </div>

    <div id="image-modal" class="modal fixed inset-0 bg-black bg-opacity-75 items-center justify-center hidden p-4">
        <div class="bg-white rounded-2xl shadow-2xl max-w-2xl max-h-full overflow-hidden p-4 relative">
            <button id="close-image-modal" class="absolute top-2 left-2 text-stone-800 text-4xl leading-none font-bold">&times;</button>
            <img id="modal-image" class="w-full h-auto max-h-[80vh] object-contain" src="" alt="مستند">
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast fixed bottom-4 right-4 bg-teal-600 text-white px-6 py-3 rounded-xl shadow-lg font-bold">
        تمت العملية بنجاح!
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { 
            getAuth, 
            onAuthStateChanged, 
            createUserWithEmailAndPassword,
            signInWithEmailAndPassword,
            signOut,
            signInAnonymously,
            signInWithCustomToken,
            GoogleAuthProvider,
            signInWithPopup
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { 
            getFirestore, 
            doc, 
            setDoc, 
            onSnapshot,
            getDoc
        } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { apiKey: "your-api-key", authDomain: "your-auth-domain", projectId: "your-project-id" };
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        // Check for placeholder config
        if (firebaseConfig.apiKey === "your-api-key") {
            document.body.innerHTML = `
                <div class="flex items-center justify-center h-screen bg-stone-100">
                    <div class="text-center p-8 bg-white rounded-2xl shadow-lg">
                        <h1 class="text-3xl font-bold text-red-600 mb-4">خطأ في الإعدادات</h1>
                        <p class="text-stone-700">لم يتم تكوين إعدادات Firebase بشكل صحيح.</p>
                        <p class="text-stone-500 mt-2">يرجى التأكد من أن متغيرات البيئة للتطبيق قد تم ضبطها.</p>
                    </div>
                </div>`;
            throw new Error("Firebase config is not set up.");
        }

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        let userId;
        let unsubscribeFromFirestore;

        const defaultState = {
            accounts: {
                'general': { name: 'الميزانية العامة', balance: 0 },
            },
            sources: {
                'مكنون': 'مكنون',
                'كاش': 'كاش',
                'مبالغ مستردة': 'مبالغ مستردة',
                'أرباح مبقاة': 'أرباح مبقاة'
            },
            liabilities: [],
            transactions: [],
            transactionCounters: {
                deposit: 0,
                withdraw: 0,
                liability: 0,
                refund: 0,
            },
        };

        let state = { ...defaultState };

        document.addEventListener('DOMContentLoaded', () => {
            const ui = {
                authContainer: document.getElementById('auth-container'),
                mainAppContainer: document.getElementById('main-app-container'),
                loginView: document.getElementById('login-view'),
                signupView: document.getElementById('signup-view'),
                loginForm: document.getElementById('login-form'),
                signupForm: document.getElementById('signup-form'),
                showSignupBtn: document.getElementById('show-signup-2'),
                showLoginBtn: document.getElementById('show-login'),
                authButton: document.getElementById('auth-button'),
                googleSignInBtn: document.getElementById('google-signin-btn'),
                guestSignInBtn: document.getElementById('guest-signin-btn'),
                domainFixInstruction: document.getElementById('domain-fix-instruction'),
                domainToCopy: document.getElementById('domain-to-copy'),
                copyDomainBtn: document.getElementById('copy-domain-btn'),
                // Main UI
                totalBalance: document.getElementById('total-balance'),
                accountsList: document.getElementById('accounts-list'),
                budgetChartCanvas: document.getElementById('budget-chart'),
                // Sidebar & Navigation
                openSidebar: document.getElementById('open-sidebar'),
                closeSidebar: document.getElementById('close-sidebar'),
                sidebar: document.getElementById('sidebar'),
                contentSections: document.querySelectorAll('.content-section'),
                menuItems: document.querySelectorAll('.menu-item'),
                // Forms
                depositForm: document.getElementById('deposit-form'),
                depositAmount: document.getElementById('deposit-amount'),
                depositCategory: document.getElementById('deposit-category'),
                depositSource: document.getElementById('deposit-source'),
                refundTxidContainer: document.getElementById('refund-txid-container'),
                refundTxid: document.getElementById('refund-txid'),
                otherSourceContainer: document.getElementById('other-source-container'),
                otherSourceName: document.getElementById('other-source-name'),
                depositDesc: document.getElementById('deposit-desc'),
                depositInvoice: document.getElementById('deposit-invoice'),
                depositInvoiceLabel: document.getElementById('deposit-invoice-label'),
                addCategoryForm: document.getElementById('add-category-form'),
                newCategoryName: document.getElementById('new-category-name'),
                addSourceForm: document.getElementById('add-source-form'),
                newSourceName: document.getElementById('new-source-name'),
                withdrawForm: document.getElementById('withdraw-form'),
                withdrawAmount: document.getElementById('withdraw-amount'),
                withdrawSourceCategory: document.getElementById('withdraw-source-category'),
                withdrawDestCategory: document.getElementById('withdraw-dest-category'),
                withdrawPayerName: document.getElementById('withdraw-payer-name'),
                withdrawDesc: document.getElementById('withdraw-desc'),
                withdrawInvoice: document.getElementById('withdraw-invoice'),
                // Modals
                errorModal: document.getElementById('error-modal'),
                errorTitle: document.getElementById('error-title'),
                errorMessageContainer: document.getElementById('error-message-container'),
                closeErrorModal: document.getElementById('close-error-modal'),
                deficitModal: document.getElementById('deficit-modal'),
                deficitMessage: document.getElementById('deficit-message'),
                deficitForm: document.getElementById('deficit-form'),
                deficitSourceCategory: document.getElementById('deficit-source-category'),
                cancelDeficitBtn: document.getElementById('cancel-deficit'),
                deleteModal: document.getElementById('delete-modal'),
                deleteMessage: document.getElementById('delete-message'),
                confirmDeleteBtn: document.getElementById('confirm-delete'),
                cancelDeleteBtn: document.getElementById('cancel-delete'),
                payLiabilityModal: document.getElementById('pay-liability-modal'),
                payLiabilityDetails: document.getElementById('pay-liability-details'),
                payLiabilityForm: document.getElementById('pay-liability-form'),
                payType: document.getElementById('pay-type'),
                partialPayAmountContainer: document.getElementById('partial-pay-amount-container'),
                partialPayAmount: document.getElementById('partial-pay-amount'),
                paySourceCategory: document.getElementById('pay-source-category'),
                cancelPayBtn: document.getElementById('cancel-pay'),
                imageModal: document.getElementById('image-modal'),
                modalImage: document.getElementById('modal-image'),
                closeImageModal: document.getElementById('close-image-modal'),
                // Liabilities
                addLiabilityForm: document.getElementById('add-liability-form'),
                liabilityFrom: document.getElementById('liability-from'),
                liabilityTo: document.getElementById('liability-to'),
                liabilityAmount: document.getElementById('liability-amount'),
                liabilityDate: document.getElementById('liability-date'),
                liabilitiesList: document.getElementById('liabilities-list'),
                // Transactions
                transactionsList: document.getElementById('transactions-list'),
                filterType: document.getElementById('filter-type'),
                filterSource: document.getElementById('filter-source'),
                filterCategory: document.getElementById('filter-category'),
                filterDate: document.getElementById('filter-date'),
                // Report
                reportMainMenu: document.getElementById('report-main-menu'),
                incomeReportCard: document.getElementById('income-report-card'),
                expensesReportCard: document.getElementById('expenses-report-card'),
                surplusReportCard: document.getElementById('surplus-report-card'),
                liabilitiesReportCard: document.getElementById('liabilities-report-card'),
                totalIncomeDisplay: document.getElementById('total-income-display'),
                totalExpensesDisplay: document.getElementById('total-expenses-display'),
                totalSurplusDeficitDisplay: document.getElementById('total-surplus-deficit-display'),
                totalLiabilitiesDisplay: document.getElementById('total-liabilities-display'),
                detailedIncomeReport: document.getElementById('detailed-income-report'),
                detailedExpensesReport: document.getElementById('detailed-expenses-report'),
                detailedSurplusReport: document.getElementById('detailed-surplus-report'),
                detailedLiabilitiesReport: document.getElementById('detailed-liabilities-report'),
                detailedIncomeList: document.getElementById('detailed-income-list'),
                detailedExpensesList: document.getElementById('detailed-expenses-list'),
                detailedSurplusList: document.getElementById('detailed-surplus-list'),
                detailedLiabilitiesList: document.getElementById('detailed-liabilities-list'),
                backToReportsButtons: document.querySelectorAll('.back-to-reports'),
                // Settings
                accountsListSettings: document.getElementById('accounts-list-settings'),
                // Attachments
                attachmentsList: document.getElementById('attachments-list'),
                filterAttachmentType: document.getElementById('filter-attachment-type'),
                // Toast
                toast: document.getElementById('toast'),
            };

            let budgetChart;
            let pendingWithdrawal = null;
            let accountToDelete = null;
            let liabilityToPay = null;

            // --- UI HELPERS ---
            function toggleButtonLoading(button, isLoading) {
                const text = button.querySelector('.button-text');
                const spinner = button.querySelector('.spinner');
                if (isLoading) {
                    text.classList.add('hidden');
                    spinner.classList.remove('hidden');
                    button.disabled = true;
                } else {
                    text.classList.remove('hidden');
                    spinner.classList.add('hidden');
                    button.disabled = false;
                }
            }
             // --- DOMAIN FIX HELPER ---
             if(ui.domainToCopy) {
                ui.domainToCopy.value = window.location.hostname;
                ui.copyDomainBtn.addEventListener('click', () => {
                    ui.domainToCopy.select();
                    document.execCommand('copy');
                    ui.copyDomainBtn.textContent = 'تم النسخ!';
                    setTimeout(() => { ui.copyDomainBtn.innerHTML = '<span>نسخ</span>'; }, 2000);
                });
            } else {
                 console.log("Domain copy elements not found on this view.");
            }


            // --- MODAL & TOAST CONTROLS ---
            function showErrorModal(title, message) {
                ui.errorTitle.textContent = title;
                ui.errorMessageContainer.innerHTML = `<p>${message.replace(/\n/g, '<br>')}</p>`;
                ui.errorModal.classList.remove('hidden');
                ui.errorModal.classList.add('modal-active');
            }

            function hideErrorModal() {
                ui.errorModal.classList.add('hidden');
                ui.errorModal.classList.remove('modal-active');
            }
            ui.closeErrorModal.addEventListener('click', hideErrorModal);

            function showToast(message) {
                ui.toast.textContent = message;
                ui.toast.classList.add('toast-active');
                setTimeout(() => {
                    ui.toast.classList.remove('toast-active');
                }, 3000);
            }

            // --- AUTHENTICATION ---
            const googleProvider = new GoogleAuthProvider();
            
            ui.showSignupBtn.addEventListener('click', () => {
                ui.loginView.classList.add('hidden');
                ui.signupView.classList.remove('hidden');
            });

            ui.showLoginBtn.addEventListener('click', () => {
                ui.signupView.classList.add('hidden');
                ui.loginView.classList.remove('hidden');
            });

            ui.guestSignInBtn.addEventListener('click', async () => {
                try {
                    await signInAnonymously(auth);
                    showToast('تم الدخول كزائر.');
                } catch (error) {
                    console.error("Anonymous sign-in failed:", error);
                    showErrorModal('خطأ', 'فشل الدخول كزائر. يرجى المحاولة مرة أخرى.');
                }
            });

            ui.googleSignInBtn.addEventListener('click', async () => {
                try {
                    const result = await signInWithPopup(auth, googleProvider);
                    const user = result.user;

                    const userDocRef = doc(db, `artifacts/${appId}/users/${user.uid}`);
                    const docSnap = await getDoc(userDocRef);

                    if (!docSnap.exists()) {
                        await setDoc(doc(db, `artifacts/${appId}/users/${user.uid}`), {
                            name: user.displayName,
                            email: user.email,
                            phone: user.phoneNumber || ''
                        });
                        showToast(`تم إنشاء الحساب بنجاح، مرحباً بك ${user.displayName}!`);
                    } else {
                        showToast(`مرحباً بعودتك ${user.displayName}!`);
                    }
                } catch (error) {
                    console.error("Google Sign-In Error:", error);
                    if (error.code === 'auth/unauthorized-domain') {
                       ui.domainFixInstruction.classList.remove('hidden');
                       showErrorModal('النطاق غير مصرح به', 'يرجى اتباع التعليمات في الرسالة الصفراء أعلى الصفحة.');
                    } else {
                       showErrorModal('خطأ في تسجيل الدخول عبر Google', 'فشلت عملية تسجيل الدخول. يرجى المحاولة مرة أخرى.');
                    }
                }
            });

            ui.signupForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const button = e.target.querySelector('button[type="submit"]');
                toggleButtonLoading(button, true);

                const name = e.target['signup-name'].value;
                const phone = e.target['signup-phone'].value;
                const email = e.target['signup-email'].value;
                const password = e.target['signup-password'].value;

                try {
                    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                    const user = userCredential.user;
                    
                    await setDoc(doc(db, `artifacts/${appId}/users/${user.uid}`), {
                        name: name,
                        phone: phone,
                        email: email
                    });
                    
                    showToast(`تم إنشاء الحساب بنجاح، مرحباً بك ${name}!`);
                } catch (error) {
                    console.error("Error signing up:", error);
                    let userMessage;
                    let title = 'خطأ في إنشاء الحساب';
                    if (error.code === 'auth/operation-not-allowed') {
                        title = 'خطأ في إعدادات Firebase';
                        userMessage = 'لم يتم تفعيل تسجيل الدخول باستخدام البريد الإلكتروني وكلمة المرور في مشروعك.\n\n' +
                                      'لحل المشكلة، يرجى اتباع الخطوات التالية:\n' +
                                      '1. اذهب إلى لوحة تحكم مشروعك في Firebase.\n' +
                                      '2. من القائمة الجانبية، اختر "Authentication".\n' +
                                      '3. اضغط على تبويب "Sign-in method".\n' +
                                      '4. اضغط على "Email/Password" من قائمة المزودين.\n' +
                                      '5. قم بتفعيل الخيار (Enable) ثم اضغط حفظ.';
                    } else if (error.code === 'auth/email-already-in-use') {
                        userMessage = 'هذا البريد الإلكتروني مسجل بالفعل. يرجى استخدام بريد آخر أو تسجيل الدخول.';
                    } else if (error.code === 'auth/weak-password') {
                        userMessage = 'كلمة المرور ضعيفة جدًا. يجب أن تتكون من 6 أحرف على الأقل.';
                    } else {
                        userMessage = `فشل إنشاء الحساب.\n\nالخطأ: ${error.message}`;
                    }
                    showErrorModal(title, userMessage);
                } finally {
                    toggleButtonLoading(button, false);
                }
            });
            
            ui.loginForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const button = e.target.querySelector('button[type="submit"]');
                toggleButtonLoading(button, true);

                const email = e.target['login-email'].value;
                const password = e.target['login-password'].value;
                try {
                    await signInWithEmailAndPassword(auth, email, password);
                    showToast('تم تسجيل الدخول بنجاح.');
                } catch (error) {
                    console.error("Error signing in:", error);
                    let userMessage;
                    if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential') {
                        userMessage = 'البريد الإلكتروني أو كلمة المرور غير صحيحة. يرجى المحاولة مرة أخرى.';
                    } else {
                        userMessage = `فشل تسجيل الدخول.\n\nالخطأ: ${error.message}`;
                    }
                    showErrorModal('خطأ في تسجيل الدخول', userMessage);
                } finally {
                    toggleButtonLoading(button, false);
                }
            });

            ui.authButton.addEventListener('click', async () => {
                try {
                    await signOut(auth);
                    showToast('تم تسجيل الخروج.');
                } catch (error) {
                    console.error("Error signing out:", error);
                    showErrorModal('خطأ', 'حدث خطأ أثناء تسجيل الخروج.');
                }
            });

            onAuthStateChanged(auth, user => {
                if (user) {
                    userId = user.uid;
                    ui.authContainer.classList.add('hidden');
                    ui.mainAppContainer.classList.remove('hidden');
                    if (ui.domainFixInstruction) {
                        ui.domainFixInstruction.classList.add('hidden');
                    }
                    loadState();
                } else {
                    userId = null;
                    if (unsubscribeFromFirestore) {
                        unsubscribeFromFirestore();
                    }
                    ui.authContainer.classList.remove('hidden');
                    ui.mainAppContainer.classList.add('hidden');
                    resetStateAndUI();
                }
            });

            (async () => {
                if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                    try {
                        await signInWithCustomToken(auth, __initial_auth_token);
                    } catch (error) {
                        console.error("Custom token sign-in failed:", error);
                    }
                }
            })();


            // --- DATA PERSISTENCE ---

            async function saveState() {
                if (!userId) return;
                try {
                    const docRef = doc(db, `artifacts/${appId}/users/${userId}/financialData/main`);
                    await setDoc(docRef, state);
                } catch (error) {
                    console.error("Error saving state:", error);
                }
            }

            async function loadState() {
                if (!userId) {
                     resetStateAndUI();
                     initializeAppLogic();
                     return;
                }

                const docRef = doc(db, `artifacts/${appId}/users/${userId}/financialData/main`);

                unsubscribeFromFirestore = onSnapshot(docRef, (docSnap) => {
                    if (docSnap.exists()) {
                        const data = docSnap.data();
                        state = { ...defaultState, ...data };
                    } else {
                        state = { ...defaultState };
                        saveState();
                    }
                    initializeAppLogic();
                }, (error) => {
                    console.error("Error loading state:", error);
                });
            }

            function resetStateAndUI() {
                state = { ...JSON.parse(JSON.stringify(defaultState)) };
                updateUI();
            }
            
            function initializeAppLogic() {
                updateUI();
            }

            // --- CORE APP LOGIC ---

            function formatCurrency(amount) {
                return new Intl.NumberFormat('ar-SA', { style: 'decimal', minimumFractionDigits: 2 }).format(amount);
            }

            function generateTransactionId(type) {
                let prefix = '';
                let counterKey = '';
                switch (type) {
                    case 'deposit': prefix = '9'; counterKey = 'deposit'; break;
                    case 'withdraw': prefix = '8'; counterKey = 'withdraw'; break;
                    case 'liability': prefix = '7'; counterKey = 'liability'; break;
                    case 'refund': prefix = '6'; counterKey = 'refund'; break;
                    case 'transfer': prefix = '5'; counterKey = 'transfer'; break;
                    default: prefix = '0'; counterKey = 'other';
                }
                const counter = state.transactionCounters[counterKey] || 0;
                state.transactionCounters[counterKey] = counter + 1;
                return `${prefix}${String(10000 + counter).substring(1)}`;
            }

            function showSection(id) {
                ui.contentSections.forEach(section => section.classList.remove('active'));
                document.getElementById(id).classList.add('active');
                ui.menuItems.forEach(item => item.classList.remove('active-menu-item', 'bg-stone-700'));
                document.querySelector(`[data-target="${id}"]`).classList.add('active-menu-item', 'bg-stone-700');
                if (id === 'transactions') renderTransactions();
                else if (id === 'liabilities') renderLiabilities();
                else if (id === 'report') showReportMainMenu();
                else if (id === 'attachments') renderAttachments();
                else if (id === 'settings') renderSettings();
            }
            
            ui.openSidebar.addEventListener('click', () => ui.sidebar.classList.add('sidebar-active'));
            ui.closeSidebar.addEventListener('click', () => ui.sidebar.classList.remove('sidebar-active'));
            ui.menuItems.forEach(item => {
                item.addEventListener('click', (e) => {
                    showSection(e.target.dataset.target);
                    ui.sidebar.classList.remove('sidebar-active');
                });
            });

            function renderTotalBalance() {
                const total = Object.values(state.accounts).reduce((sum, acc) => sum + acc.balance, 0);
                ui.totalBalance.textContent = formatCurrency(total);
            }

            let draggedItem = null;

            function renderAccounts() {
                ui.accountsList.innerHTML = '';
                const orderedAccounts = Object.entries(state.accounts);
                
                orderedAccounts.forEach(([id, account]) => {
                    const isGeneral = id === 'general';
                    const bgColor = isGeneral ? 'bg-teal-100' : 'bg-stone-100';
                    const textColor = isGeneral ? 'text-teal-800' : 'text-stone-800';
                    const accountEl = document.createElement('div');
                    accountEl.className = `p-4 rounded-lg flex justify-between items-center ${bgColor}`;
                    accountEl.innerHTML = `
                        <span class="font-bold ${textColor}">${account.name}</span>
                        <div class="flex items-center gap-2">
                            <span class="font-mono font-bold text-lg ${textColor}">${formatCurrency(account.balance)}</span>
                        </div>
                    `;
                    ui.accountsList.appendChild(accountEl);
                });
            }

            function renderSettings() {
                ui.accountsListSettings.innerHTML = '';
                Object.entries(state.accounts).forEach(([id, account]) => {
                    const isGeneral = id === 'general';
                    const accountEl = document.createElement('div');
                    accountEl.className = 'p-4 rounded-lg bg-stone-100 flex justify-between items-center';
                    if (!isGeneral) {
                        accountEl.classList.add('cursor-grab');
                        accountEl.setAttribute('draggable', true);
                    }
                    accountEl.dataset.id = id;
                    
                    const nameSpan = document.createElement('span');
                    nameSpan.className = 'font-bold text-stone-800 flex-1';
                    nameSpan.textContent = account.name;

                    const actionsDiv = document.createElement('div');
                    actionsDiv.className = 'flex gap-2';
                    
                    const editButton = document.createElement('button');
                    editButton.textContent = '✏️';
                    editButton.className = 'text-sm hover:text-teal-500 mr-2';
                    editButton.onclick = () => enableAccountEdit(id, nameSpan, editButton);
                    
                    if (!isGeneral) {
                        const removeBtn = document.createElement('button');
                        removeBtn.className = 'remove-btn text-red-500 hover:text-red-700 text-lg font-bold w-6 h-6 leading-none';
                        removeBtn.textContent = '×';
                        removeBtn.dataset.id = id;
                        actionsDiv.appendChild(removeBtn);
                    }
                    
                    actionsDiv.appendChild(editButton);
                    accountEl.appendChild(nameSpan);
                    accountEl.appendChild(actionsDiv);
                    ui.accountsListSettings.appendChild(accountEl);
                });
                addDragDropListeners();
            }

             function addDragDropListeners() {
                const list = ui.accountsListSettings;
                list.addEventListener('dragstart', (e) => {
                    if (e.target.draggable) {
                        draggedItem = e.target;
                        setTimeout(() => e.target.classList.add('opacity-50'), 0);
                    }
                });

                list.addEventListener('dragend', (e) => {
                    if (draggedItem) {
                        draggedItem.classList.remove('opacity-50');
                        draggedItem = null;
                    }
                });

                list.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    const afterElement = getDragAfterElement(list, e.clientY);
                    const draggable = document.querySelector('.opacity-50');
                    if (afterElement == null) {
                        list.appendChild(draggable);
                    } else {
                        list.insertBefore(draggable, afterElement);
                    }
                });

                list.addEventListener('drop', (e) => {
                    e.preventDefault();
                    const newOrder = [...list.children].map(child => child.dataset.id);
                    const newAccounts = {};
                    newOrder.forEach(id => {
                        if (state.accounts[id]) {
                            newAccounts[id] = state.accounts[id];
                        }
                    });
                    state.accounts = newAccounts;
                    saveState();
                    showToast('تم إعادة ترتيب البنود بنجاح');
                });

                function getDragAfterElement(container, y) {
                    const draggableElements = [...container.querySelectorAll('[draggable="true"]:not(.opacity-50)')];

                    return draggableElements.reduce((closest, child) => {
                        const box = child.getBoundingClientRect();
                        const offset = y - box.top - box.height / 2;
                        if (offset < 0 && offset > closest.offset) {
                            return { offset: offset, element: child };
                        } else {
                            return closest;
                        }
                    }, { offset: Number.NEGATIVE_INFINITY }).element;
                }
            }


            function enableAccountEdit(id, nameSpan, editButton) {
                const input = document.createElement('input');
                input.type = 'text';
                input.value = nameSpan.textContent;
                input.className = 'flex-grow p-1 border rounded-md focus:outline-none focus:ring-2 focus:ring-teal-400';
                
                const saveButton = document.createElement('button');
                saveButton.textContent = '✔️';
                saveButton.className = 'text-sm hover:text-green-500 mr-2';
                
                nameSpan.replaceWith(input);
                editButton.replaceWith(saveButton);
                
                saveButton.onclick = async () => {
                    const newName = input.value.trim();
                    if (newName && newName !== state.accounts[id].name) {
                        state.accounts[id].name = newName;
                        state.transactions.forEach(tx => {
                            if (tx.category === id) tx.categoryName = newName;
                            if (tx.source === id) tx.sourceName = newName;
                            if (tx.destCategory === id) tx.destCategoryName = newName;
                        });
                        showToast('تم تعديل اسم البند بنجاح');
                        await saveState();
                    }
                    input.replaceWith(nameSpan);
                    saveButton.replaceWith(editButton);
                    renderSettings();
                    updateCategoryDropdowns();
                };
                
                input.focus();
            }

            function updateCategoryDropdowns() {
                const options = Object.entries(state.accounts)
                    .map(([id, account]) => `<option value="${id}">${account.name}</option>`).join('');
                
                ui.depositCategory.innerHTML = options;
                ui.withdrawSourceCategory.innerHTML = options;
                ui.withdrawDestCategory.innerHTML = options;
                ui.liabilityFrom.innerHTML = options;
                ui.liabilityTo.innerHTML = options;
                ui.deficitSourceCategory.innerHTML = options;
                ui.paySourceCategory.innerHTML = options;
                
                const filterCategoryOptions = Object.entries(state.accounts)
                    .map(([id, account]) => `<option value="${id}">${account.name}</option>`).join('');
                ui.filterCategory.innerHTML = `<option value="all">الكل</option>` + filterCategoryOptions;
            }

            function updateSourceDropdowns() {
                 const sourcesArray = Object.keys(state.sources || {}).sort((a, b) => {
                    const order = ['مكنون', 'كاش', 'مبالغ مستردة', 'أرباح مبقاة'];
                    return order.indexOf(a) - order.indexOf(b);
                });
                const options = sourcesArray.map(source => `<option value="${source}">${source}</option>`).join('');
                ui.depositSource.innerHTML = options + `<option value="اخرى">اخرى</option>`;
                
                const filterSourceOptions = sourcesArray.map(source => `<option value="${source}">${source}</option>`).join('');
                ui.filterSource.innerHTML = `<option value="all">الكل</option>` + filterSourceOptions;
            }

            function renderChart() {
                const ctx = ui.budgetChartCanvas.getContext('2d');
                if (budgetChart) budgetChart.destroy();
                budgetChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: Object.values(state.accounts).map(acc => acc.name),
                        datasets: [{
                            data: Object.values(state.accounts).map(acc => acc.balance),
                            backgroundColor: ['rgba(19, 78, 74, 0.8)', 'rgba(21, 94, 117, 0.8)', 'rgba(6, 182, 212, 0.8)', 'rgba(107, 114, 128, 0.8)', 'rgba(249, 115, 22, 0.8)', 'rgba(239, 68, 68, 0.8)'],
                            borderColor: '#fdfaf6', borderWidth: 3, hoverOffset: 8
                        }]
                    },
                    options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'top', labels: { font: { family: "'Tajawal', sans-serif" }}}}}
                });
            }

            function renderLiabilities() {
                ui.liabilitiesList.innerHTML = '';
                if (state.liabilities.length === 0) {
                    ui.liabilitiesList.innerHTML = '<p class="text-stone-500 text-center">لا توجد التزامات حالياً.</p>';
                    return;
                }
                state.liabilities.forEach((liability, index) => {
                    const fromAccount = state.accounts[liability.from]?.name || 'بند محذوف';
                    const toAccount = state.accounts[liability.to]?.name || 'بند محذوف';
                    const dueDate = liability.dueDate ? new Date(liability.dueDate).toLocaleDateString('ar-SA') : 'غير محدد';
                    const el = document.createElement('div');
                    el.className = 'bg-amber-100 text-amber-800 p-3 rounded-lg flex flex-col sm:flex-row justify-between items-center sm:items-start';
                    el.innerHTML = `
                        <div class="mb-2 sm:mb-0 text-right sm:text-left">
                            <span class="font-bold">التزام:</span> <span>بند "<strong>${fromAccount}</strong>" عليه التزام لبند "<strong>${toAccount}</strong>"</span><br>
                            <span class="text-sm">تاريخ الاستحقاق: ${dueDate}</span>
                        </div>
                        <div class="flex items-center gap-4">
                            <span class="font-mono font-bold text-lg">${formatCurrency(liability.amount)}</span>
                            <button class="pay-liability-btn btn bg-teal-500 text-white font-bold py-2 px-4 rounded-lg hover:bg-teal-600" data-index="${index}">دفع</button>
                        </div>
                    `;
                    ui.liabilitiesList.appendChild(el);
                });
            }

            function renderTransactions() {
                ui.transactionsList.innerHTML = '';
                let filteredTransactions = [...state.transactions];
                const filterType = ui.filterType.value, filterSource = ui.filterSource.value, filterCategory = ui.filterCategory.value, filterDate = ui.filterDate.value;

                if (filterType !== 'all') filteredTransactions = filteredTransactions.filter(tx => tx.type === filterType);
                if (filterSource !== 'all') filteredTransactions = filteredTransactions.filter(tx => tx.sourceName === filterSource);
                if (filterCategory !== 'all') filteredTransactions = filteredTransactions.filter(tx => tx.category === filterCategory || (tx.type === 'withdraw' && tx.destCategory === filterCategory) || (tx.type === 'liability' && (tx.category === filterCategory || tx.destCategory === filterCategory)));
                if (filterDate) filteredTransactions = filteredTransactions.filter(tx => new Date(tx.date).toISOString().split('T')[0] === filterDate);
                
                if (filteredTransactions.length === 0) { ui.transactionsList.innerHTML = '<p class="text-stone-500 text-center">لا توجد عمليات مسجلة.</p>'; return; }
                filteredTransactions.reverse().forEach(tx => {
                    const el = document.createElement('div'); el.className = 'border-b border-stone-200 pb-2';
                    let type, color, details, amount;
                    if (tx.type === 'deposit') { type = 'إيداع'; color = 'text-green-600'; details = `<p>من <strong>${tx.sourceName}</strong> إلى <strong>${tx.categoryName}</strong></p>`; amount = `+${formatCurrency(tx.amount)}`; } 
                    else if (tx.type === 'withdraw') { type = 'سحب'; color = 'text-red-600'; details = `<p>من <strong>${state.accounts[tx.source]?.name || 'بند محذوف'}</strong> إلى <strong>${tx.destCategoryName}</strong></p>`; amount = `-${formatCurrency(tx.amount)}`; if (tx.refundedAmount > 0) amount = `<span class="line-through">${formatCurrency(tx.amount)}</span> ${formatCurrency(tx.amount - tx.refundedAmount)} (متبقي)`; } 
                    else if (tx.type === 'liability') { type = 'قيد التزام'; color = 'text-orange-600'; details = `<p>بند <strong>${tx.categoryName}</strong> مدين لـ <strong>${tx.destCategoryName}</strong></p>`; amount = `${formatCurrency(tx.amount)}`; } 
                    else if (tx.type === 'refund') { type = 'مبلغ مسترد'; color = 'text-blue-600'; details = `<p>استرداد مبلغ من عملية الصرف #${tx.refundedTxId}</p>`; amount = `+${formatCurrency(tx.amount)}`; }
                     else if (tx.type === 'transfer') { type = 'تحويل/تسديد'; color = 'text-indigo-600'; details = `<p>من <strong>${tx.sourceName}</strong> إلى <strong>${tx.categoryName}</strong></p>`; amount = `${formatCurrency(tx.amount)}`; }
                    
                    const invoiceImg = tx.invoice ? `<img src="${tx.invoice}" class="w-12 h-12 rounded-lg object-cover cursor-pointer hover:opacity-80" data-image="${tx.invoice}" alt="مستند">` : '';
                    el.innerHTML = `<div class="flex justify-between items-center"><span class="font-bold">${type}</span><div class="flex items-center gap-2"><span class="font-mono font-bold ${color}">${amount}</span>${invoiceImg}</div></div><div class="text-sm text-stone-500">${details}${tx.payer ? `<p class="text-sm text-stone-400">الصارف: ${tx.payer}</p>` : ''}<span>${new Date(tx.date).toLocaleDateString('ar-SA')}</span> <span class="font-mono text-xs text-stone-400">رمز العملية: ${tx.txId}</span></div>`;
                    ui.transactionsList.appendChild(el);
                });
            }
            
            ui.transactionsList.addEventListener('click', (e) => {
                const imgElement = e.target.closest('img');
                if (imgElement) { ui.modalImage.src = imgElement.dataset.image; ui.imageModal.classList.remove('hidden'); ui.imageModal.classList.add('modal-active'); }
            });
            ui.closeImageModal.addEventListener('click', () => { ui.imageModal.classList.add('hidden'); ui.imageModal.classList.remove('modal-active'); });

            function renderAttachments() {
                ui.attachmentsList.innerHTML = '';
                const filterType = ui.filterAttachmentType.value;
                const attachments = state.transactions.filter(tx => tx.invoice);
                let filteredAttachments = attachments;
                if (filterType !== 'all') {
                    if (filterType === 'payslips') filteredAttachments = attachments.filter(tx => tx.desc === 'راتب');
                    else if (filterType === 'liability') filteredAttachments = attachments.filter(tx => tx.desc.includes('تسديد التزام'));
                    else filteredAttachments = attachments.filter(tx => tx.type === filterType);
                }
                if (filteredAttachments.length === 0) { ui.attachmentsList.innerHTML = '<p class="col-span-full text-center text-stone-500">لا توجد مرفقات مسجلة.</p>'; return; }
                filteredAttachments.reverse().forEach(tx => {
                    const el = document.createElement('div');
                    el.className = 'bg-stone-100 p-3 rounded-lg shadow-sm cursor-pointer';
                    el.innerHTML = `<img src="${tx.invoice}" class="w-full h-32 object-cover rounded-lg" data-image="${tx.invoice}" alt="مرفق"><div class="mt-2 text-sm text-center"><p>${tx.type === 'deposit' ? 'إيداع' : 'سحب'} - ${formatCurrency(tx.amount)}</p><p class="text-stone-500 text-xs">رمز العملية: ${tx.txId}</p></div>`;
                    el.querySelector('img').onclick = () => { ui.modalImage.src = tx.invoice; ui.imageModal.classList.remove('hidden'); ui.imageModal.classList.add('modal-active'); };
                    ui.attachmentsList.appendChild(el);
                });
            }
            ui.filterAttachmentType.addEventListener('change', renderAttachments);

            function updateFilterDropdowns() {
                const allSources = Object.keys(state.sources);
                const sourceOptions = allSources.map(s => `<option value="${s}">${s}</option>`).join('');
                ui.filterSource.innerHTML = `<option value="all">الكل</option>` + sourceOptions;
                const categoryOptions = Object.entries(state.accounts).map(([id, account]) => `<option value="${id}">${account.name}</option>`).join('');
                ui.filterCategory.innerHTML = `<option value="all">الكل</option>` + categoryOptions;
            }

            function renderReportSummary() {
                const totalIncome = state.transactions.filter(tx => tx.type === 'deposit' || tx.type === 'refund').reduce((sum, tx) => sum + tx.amount, 0);
                const totalExpenses = state.transactions.filter(tx => tx.type === 'withdraw').reduce((sum, tx) => sum + tx.amount, 0);
                const totalLiabilities = state.liabilities.reduce((sum, liab) => sum + liab.amount, 0);
                const netChange = totalIncome - totalExpenses;
                const netChangeClass = netChange >= 0 ? 'text-green-600' : 'text-red-600';
                const netChangeSign = netChange >= 0 ? 'فائض' : 'عجز';
                ui.totalIncomeDisplay.textContent = formatCurrency(totalIncome);
                ui.totalExpensesDisplay.textContent = formatCurrency(totalExpenses);
                ui.totalSurplusDeficitDisplay.textContent = `${netChangeSign}: ${formatCurrency(Math.abs(netChange))}`;
                ui.totalSurplusDeficitDisplay.className = `text-2xl font-bold mt-2 ${netChangeClass}`;
                ui.totalLiabilitiesDisplay.textContent = formatCurrency(totalLiabilities);
            }

            function updateUI() {
                renderTotalBalance();
                renderAccounts();
                updateCategoryDropdowns();
                updateSourceDropdowns();
                renderChart();
                renderLiabilities();
                renderTransactions();
                updateFilterDropdowns();
                renderReportSummary();
                renderAttachments();
            }

            function addTransaction(type, amount, category, desc, invoice = '', sourceId = '', sourceName = '', payer = '', destId = '', destName = '', refundedTxId = '') {
                const txId = generateTransactionId(type);
                const newTransaction = { txId, type, amount, category, categoryName: state.accounts[category]?.name, desc, invoice, source: sourceId, sourceName: sourceName, payer, destCategory: destId, destCategoryName: destName, date: new Date().toISOString(), refundedTxId, refundedAmount: 0 };
                state.transactions.push(newTransaction);
            }
            
            ui.depositSource.addEventListener('change', (e) => {
                const source = e.target.value;
                ui.refundTxidContainer.classList.toggle('hidden', source !== 'مبالغ مستردة');
                ui.otherSourceContainer.classList.toggle('hidden', source !== 'اخرى');
                ui.refundTxid.required = (source === 'مبالغ مستردة');
                ui.otherSourceName.required = (source === 'اخرى');
            });

            ui.depositDesc.addEventListener('input', (e) => { ui.depositInvoiceLabel.textContent = e.target.value.trim() === 'راتب' ? 'إرفاق مسير (صورة)' : 'إرفاق مستند (صورة)'; });

            ui.depositForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const amount = parseFloat(ui.depositAmount.value); const category = ui.depositCategory.value; const source = ui.depositSource.value; const desc = ui.depositDesc.value;
                if (amount <= 0 || !category) { showErrorModal('خطأ', 'يرجى إدخال مبلغ صحيح واختيار بند.'); return; }
                let invoiceFile = ui.depositInvoice.files[0];
                if (invoiceFile) {
                    const reader = new FileReader();
                    reader.onload = (e) => processDeposit(source, amount, category, desc, e.target.result);
                    reader.readAsDataURL(invoiceFile);
                } else { processDeposit(source, amount, category, desc, ''); }
            });
            
            async function processDeposit(source, amount, category, desc, invoice) {
                if (source === 'مبالغ مستردة') {
                    const txId = ui.refundTxid.value.trim();
                    const originalTx = state.transactions.find(tx => tx.txId === txId && tx.type === 'withdraw');
                    if (!originalTx) { showErrorModal('خطأ', 'رمز قيد الصرف غير صحيح.'); return; }
                    if (amount > originalTx.amount - (originalTx.refundedAmount || 0)) { showErrorModal('خطأ', 'المبلغ المسترد أكبر من المبلغ المتبقي.'); return; }
                    state.accounts[originalTx.source].balance += amount;
                    originalTx.refundedAmount = (originalTx.refundedAmount || 0) + amount;
                    addTransaction('refund', amount, originalTx.source, `استرداد من #${originalTx.txId}`, invoice, originalTx.source, originalTx.sourceName);
                } else {
                    let sourceName = (source === 'اخرى') ? ui.otherSourceName.value.trim() || 'أخرى' : source;
                    state.accounts[category].balance += amount;
                    addTransaction('deposit', amount, category, desc, invoice, sourceName, sourceName);
                }
                await saveState(); updateUI(); ui.depositForm.reset(); showToast('تمت العملية بنجاح!');
            }
            
            ui.withdrawForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const amount = parseFloat(ui.withdrawAmount.value); const sourceCatId = ui.withdrawSourceCategory.value; const destCatId = ui.withdrawDestCategory.value; const payer = ui.withdrawPayerName.value.trim(); const desc = ui.withdrawDesc.value;
                let invoiceFile = ui.withdrawInvoice.files[0];
                if (invoiceFile) {
                    const reader = new FileReader();
                    reader.onload = (e) => processWithdrawal(amount, sourceCatId, destCatId, payer, desc, e.target.result);
                    reader.readAsDataURL(invoiceFile);
                } else { processWithdrawal(amount, sourceCatId, destCatId, payer, desc, ''); }
            });
            
            async function processWithdrawal(amount, sourceCategoryId, destCategoryId, payer, desc, invoice) {
                if (amount <= 0 || !sourceCategoryId || !destCategoryId || !desc) return;
                const sourceAccount = state.accounts[sourceCategoryId]; const destAccount = state.accounts[destCategoryId];
                if (sourceAccount.balance >= amount) {
                    sourceAccount.balance -= amount;
                    addTransaction('withdraw', amount, sourceCategoryId, desc, invoice, sourceCategoryId, sourceAccount.name, payer, destCategoryId, destAccount.name);
                    await saveState(); updateUI(); ui.withdrawForm.reset(); showToast('تم السحب بنجاح!');
                } else {
                    pendingWithdrawal = { amount, sourceCategoryId, destCategoryId, desc, invoice, payer, deficit: amount - sourceAccount.balance };
                    showDeficitModal();
                }
            }

            ui.addCategoryForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const name = ui.newCategoryName.value.trim();
                if (name) {
                    const id = `custom_${Date.now()}`;
                    state.accounts[id] = { name, balance: 0 };
                    await saveState(); updateUI(); ui.newCategoryName.value = ''; showToast('تم إضافة البند بنجاح!');
                }
            });

            ui.addSourceForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const name = ui.newSourceName.value.trim();
                if (name && !state.sources[name]) {
                    state.sources[name] = name;
                    await saveState(); updateUI(); ui.newSourceName.value = ''; showToast('تم إضافة المصدر بنجاح!');
                } else if (state.sources[name]) { showErrorModal('خطأ', 'هذا المصدر موجود بالفعل.'); }
            });
            
            ui.addLiabilityForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const from = ui.liabilityFrom.value; const to = ui.liabilityTo.value; const amount = parseFloat(ui.liabilityAmount.value); const dueDate = ui.liabilityDate.value;
                if (from && to && amount > 0) {
                    state.liabilities.push({ from, to, amount, dueDate, id: Date.now() });
                    addTransaction('liability', amount, from, `التزام من ${state.accounts[from].name} إلى ${state.accounts[to].name}`, '', from, state.accounts[from].name, '', to, state.accounts[to].name);
                    await saveState(); renderLiabilities(); ui.addLiabilityForm.reset(); showToast('تم إضافة الالتزام بنجاح!');
                }
            });
            
            ui.liabilitiesList.addEventListener('click', (e) => { if (e.target.classList.contains('pay-liability-btn')) { liabilityToPay = state.liabilities[e.target.dataset.index]; showPayLiabilityModal(liabilityToPay); } });
            ui.payType.addEventListener('change', (e) => { ui.partialPayAmountContainer.classList.toggle('hidden', e.target.value !== 'partial'); ui.partialPayAmount.required = e.target.value === 'partial'; });
            
            ui.payLiabilityForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                if (!liabilityToPay) return;
                const payType = ui.payType.value;
                const paySource = ui.paySourceCategory.value;
                let payAmount = (payType === 'full') ? liabilityToPay.amount : parseFloat(ui.partialPayAmount.value);

                if (isNaN(payAmount) || payAmount <= 0 || payAmount > liabilityToPay.amount) {
                    showErrorModal('خطأ', 'المبلغ المدفوع غير صالح.');
                    return;
                }

                if (paySource === 'external') {
                    state.accounts[liabilityToPay.to].balance += payAmount;
                    addTransaction('deposit', payAmount, liabilityToPay.to, `تسديد التزام من مصدر خارجي`, '', 'مصدر خارجي', 'مصدر خارجي', '', liabilityToPay.to, state.accounts[liabilityToPay.to].name);
                } else {
                    const sourceAccount = state.accounts[paySource];
                    if (sourceAccount.balance < payAmount) {
                        showErrorModal('خطأ', 'الرصيد في البند المختار غير كافٍ.');
                        return;
                    }
                    sourceAccount.balance -= payAmount;
                    state.accounts[liabilityToPay.to].balance += payAmount;
                    addTransaction('transfer', payAmount, liabilityToPay.to, `تسديد التزام من ${sourceAccount.name}`, '', paySource, sourceAccount.name, '', liabilityToPay.to, state.accounts[liabilityToPay.to].name);
                }

                liabilityToPay.amount -= payAmount;
                if (liabilityToPay.amount <= 0.01) {
                    state.liabilities = state.liabilities.filter(l => l.id !== liabilityToPay.id);
                }

                hidePayLiabilityModal();
                await saveState();
                updateUI();
                showToast('تم دفع الالتزام بنجاح!');
            });


            function showPayLiabilityModal(liability) {
                ui.payLiabilityDetails.textContent = `دفع التزام بمبلغ ${formatCurrency(liability.amount)} من بند "${state.accounts[liability.from].name}" إلى "${state.accounts[liability.to].name}".`;
                const sourceOptions = Object.entries(state.accounts).filter(([id, acc]) => acc.balance > 0).map(([id, acc]) => `<option value="${id}">${acc.name} (المتاح: ${formatCurrency(acc.balance)})</option>`).join('');
                ui.paySourceCategory.innerHTML = sourceOptions + '<option value="external" class="font-bold text-blue-600">-- مصدر خارجي --</option>';
                ui.payLiabilityModal.classList.remove('hidden'); ui.payLiabilityModal.classList.add('modal-active'); ui.payType.value = 'full'; ui.partialPayAmountContainer.classList.add('hidden');
            }
            function hidePayLiabilityModal() { ui.payLiabilityModal.classList.add('hidden'); ui.payLiabilityModal.classList.remove('modal-active'); liabilityToPay = null; }
            ui.cancelPayBtn.addEventListener('click', hidePayLiabilityModal);

            function showDeficitModal() {
                const { deficit } = pendingWithdrawal;
                ui.deficitMessage.textContent = `رصيد بند "${state.accounts[pendingWithdrawal.sourceCategoryId].name}" غير كافٍ. العجز: ${formatCurrency(deficit)}.`;
                const sourceOptions = Object.entries(state.accounts).filter(([id, acc]) => id !== pendingWithdrawal.sourceCategoryId && acc.balance >= deficit).map(([id, acc]) => `<option value="${id}">${acc.name} (المتاح: ${formatCurrency(acc.balance)})</option>`).join('');
                if (sourceOptions) { ui.deficitSourceCategory.innerHTML = sourceOptions; ui.deficitModal.classList.remove('hidden'); ui.deficitModal.classList.add('modal-active'); } 
                else { showErrorModal('لا يوجد رصيد كافٍ', 'لا يوجد بند آخر به رصيد كافٍ لتغطية العجز.'); pendingWithdrawal = null; }
            }
            function hideDeficitModal() { ui.deficitModal.classList.add('hidden'); ui.deficitModal.classList.remove('modal-active'); pendingWithdrawal = null; }
            function showDeleteModal(id) { ui.deleteMessage.textContent = `هل أنت متأكد من حذف البند "${state.accounts[id].name}"؟`; ui.deleteModal.classList.remove('hidden'); ui.deleteModal.classList.add('modal-active'); accountToDelete = id; }
            function hideDeleteModal() { ui.deleteModal.classList.add('hidden'); ui.deleteModal.classList.remove('modal-active'); accountToDelete = null; }
            
            ui.accountsListSettings.addEventListener('click', (e) => {
                if (e.target.classList.contains('remove-btn')) {
                    const id = e.target.dataset.id; const account = state.accounts[id];
                    if (account.balance !== 0) { showErrorModal('لا يمكن الحذف', `لا يمكن حذف البند "${account.name}" لأن رصيده ليس صفرًا.`); return; }
                    if (state.liabilities.some(l => l.from === id || l.to === id)) { showErrorModal('لا يمكن الحذف', `لا يمكن حذف البند "${account.name}" لوجود التزامات مرتبطة به.`); return; }
                    showDeleteModal(id);
                }
            });
            
            ui.confirmDeleteBtn.addEventListener('click', async () => { if (accountToDelete) { delete state.accounts[accountToDelete]; await saveState(); updateUI(); hideDeleteModal(); showToast('تم حذف البند بنجاح!'); } });
            ui.cancelDeleteBtn.addEventListener('click', hideDeleteModal);
            ui.cancelDeficitBtn.addEventListener('click', hideDeficitModal);

            ui.deficitForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const deficitSourceId = ui.deficitSourceCategory.value;
                if (!deficitSourceId || !pendingWithdrawal) { hideDeficitModal(); return; }
                const { amount, sourceCategoryId: originalSource, destCategoryId, desc, invoice, payer, deficit } = pendingWithdrawal;
                if (state.accounts[deficitSourceId].balance >= deficit) {
                    state.accounts[originalSource].balance -= (amount - deficit);
                    state.accounts[deficitSourceId].balance -= deficit;
                    if (deficitSourceId !== 'general') {
                        const existingLiability = state.liabilities.find(l => l.from === originalSource && l.to === deficitSourceId);
                        if (existingLiability) { existingLiability.amount += deficit; } 
                        else { state.liabilities.push({ from: originalSource, to: deficitSourceId, amount: deficit, id: Date.now() }); }
                        addTransaction('liability', deficit, originalSource, `قيد التزام لتغطية العجز`, '', originalSource, state.accounts[originalSource].name, 'نظام', deficitSourceId, state.accounts[deficitSourceId].name);
                    }
                    addTransaction('withdraw', amount, originalSource, desc, invoice, originalSource, state.accounts[originalSource].name, payer, destCategoryId, state.accounts[destCategoryId].name);
                    await saveState(); updateUI(); ui.withdrawForm.reset(); hideDeficitModal(); showToast('تم السحب وتغطية العجز بنجاح!');
                } else { showErrorModal('خطأ', 'لا يوجد رصيد كافٍ في البند المختار.'); }
            });
            
            ui.filterType.addEventListener('change', renderTransactions);
            ui.filterSource.addEventListener('change', renderTransactions);
            ui.filterCategory.addEventListener('change', renderTransactions);
            ui.filterDate.addEventListener('change', renderTransactions);
            
            function showReportMainMenu() { ui.reportMainMenu.classList.remove('hidden'); ui.detailedIncomeReport.classList.add('hidden'); ui.detailedExpensesReport.classList.add('hidden'); ui.detailedSurplusReport.classList.add('hidden'); ui.detailedLiabilitiesReport.classList.add('hidden'); }
            function showDetailedReport(reportId) { ui.reportMainMenu.classList.add('hidden'); document.querySelectorAll('.content-section#report > div:not(#report-main-menu)').forEach(r => r.classList.add('hidden')); document.getElementById(reportId).classList.remove('hidden'); }

            ui.incomeReportCard.addEventListener('click', () => { renderDetailedIncomeReport(); showDetailedReport('detailed-income-report'); });
            ui.expensesReportCard.addEventListener('click', () => { renderDetailedExpensesReport(); showDetailedReport('detailed-expenses-report'); });
            ui.surplusReportCard.addEventListener('click', () => { renderDetailedSurplusReport(); showDetailedReport('detailed-surplus-report'); });
            ui.liabilitiesReportCard.addEventListener('click', () => { renderDetailedLiabilitiesReport(); showDetailedReport('detailed-liabilities-report'); });
            ui.backToReportsButtons.forEach(btn => btn.addEventListener('click', showReportMainMenu));

            function renderDetailedIncomeReport() {
                const incomeBySource = {};
                state.transactions.filter(tx => tx.type === 'deposit' || tx.type === 'refund').forEach(tx => {
                    const source = tx.sourceName || 'أخرى'; if (!incomeBySource[source]) incomeBySource[source] = { total: 0, count: 0 };
                    incomeBySource[source].total += tx.amount; incomeBySource[source].count++;
                });
                ui.detailedIncomeList.innerHTML = Object.keys(incomeBySource).length === 0 ? '<p class="text-stone-500 text-center">لا توجد إيرادات.</p>' : Object.entries(incomeBySource).map(([source, data]) => `<div class="bg-stone-100 p-4 rounded-lg shadow-sm"><h4 class="font-bold text-lg">${source}</h4><div class="mt-2 text-sm space-y-1"><div class="flex justify-between"><span>الإجمالي:</span><span class="font-mono text-green-600">${formatCurrency(data.total)}</span></div><div class="flex justify-between"><span>العدد:</span><span class="font-mono">${data.count}</span></div></div></div>`).join('');
            }
            function renderDetailedExpensesReport() {
                const expensesByAccount = {};
                state.transactions.filter(tx => tx.type === 'withdraw').forEach(tx => {
                    const accName = state.accounts[tx.source]?.name || 'محذوف'; if (!expensesByAccount[accName]) expensesByAccount[accName] = { total: 0, count: 0 };
                    expensesByAccount[accName].total += tx.amount; expensesByAccount[accName].count++;
                });
                ui.detailedExpensesList.innerHTML = Object.keys(expensesByAccount).length === 0 ? '<p class="text-stone-500 text-center">لا توجد مصروفات.</p>' : Object.entries(expensesByAccount).map(([name, data]) => `<div class="bg-stone-100 p-4 rounded-lg shadow-sm"><h4 class="font-bold text-lg">${name}</h4><div class="mt-2 text-sm space-y-1"><div class="flex justify-between"><span>الإجمالي:</span><span class="font-mono text-red-600">${formatCurrency(data.total)}</span></div><div class="flex justify-between"><span>العدد:</span><span class="font-mono">${data.count}</span></div></div></div>`).join('');
            }
            function renderDetailedSurplusReport() {
                const accountNet = {};
                Object.entries(state.accounts).forEach(([id, acc]) => accountNet[id] = { name: acc.name, total: 0 });
                state.transactions.forEach(tx => {
                    if (tx.type === 'deposit' && accountNet[tx.category]) accountNet[tx.category].total += tx.amount;
                    else if (tx.type === 'withdraw' && accountNet[tx.source]) accountNet[tx.source].total -= tx.amount;
                });
                ui.detailedSurplusList.innerHTML = Object.values(accountNet).map(data => `<div class="bg-stone-100 p-4 rounded-lg shadow-sm"><div class="flex justify-between items-center"><h4 class="font-bold text-lg">${data.name}</h4><span class="font-mono ${data.total >= 0 ? 'text-green-600' : 'text-red-600'}">${data.total >= 0 ? '+' : ''}${formatCurrency(data.total)}</span></div></div>`).join('');
            }
            function renderDetailedLiabilitiesReport() {
                if (state.liabilities.length === 0) { ui.detailedLiabilitiesList.innerHTML = '<p class="text-stone-500 text-center">لا توجد التزامات.</p>'; return; }
                ui.detailedLiabilitiesList.innerHTML = state.liabilities.map(l => {
                    const fromName = state.accounts[l.from]?.name || 'بند محذوف';
                    const toName = state.accounts[l.to]?.name || 'بند محذوف';
                    return `<div class="bg-amber-100 text-amber-800 p-3 rounded-lg"><p><strong>التزام:</strong> "${fromName}" مدين لـ "${toName}"</p><p><strong>المبلغ:</strong> ${formatCurrency(l.amount)}</p></div>`
                }).join('');
            }
        });
    </script>
</body>
</html>

